@model LostInTranslation.Viewmodels.LanguageSelectorVM

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        @*<p class="col col-md-2"></p>*@
        <p class="page-header col col-md-12">@Model.Heading</p>
    </div>

    <div class="row">
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phrase, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phrase, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phrase, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Language, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col col-md-10">
                    @Html.DropDownListFor(model => model.SelectedLanguageId, new SelectList(@Model.Language, "Value", "Text", Model.SelectedLanguageId), "- select -", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Language, null, new { @class = "text-danger" })
                </div>
            </div>
            @if (Model.StageInProcess == 2)
                {
                <div class="row">
                    <div class="col col-md-offset-2 col-md-10 reset">
                        <div>@Html.ActionLink("Reset", "SelectLanguage", null, new { @class = "btn btn-danger" })</div>
                    </div>
                    <p class="col col-md-offset-2 col-md-10" id="start-message">@Model.StartMessage</p>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="form-group">
                        <div class="col col-md-offset-2 col-md-6">
                            <input type="submit" value="Translate!" class="btn btn-default" id="whisper-btn" />
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="row">
            <label class="col col-md-2" id="result-label">Result </label>
            <div class="col col-md-10">
                <span id="result" class="form-control"></span>

            </div>
        </div>

        @*ONLY NEEDED FOR PROGRESS BAR*@
        @*<div class="row">
                <div class="col col-md-offset-2 col-md-10">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped" role="progressbar" id="my-progress-bar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                </div>
            </div>

            <p class="hidden" id="progress-counter" value="">0</p>*@

    </div>

}
@*<script>
        $(document).ready(function () {
            //$("#start-message").fadeIn(5000);
            //$("#start-message").delay(2000).fadeOut(5000);
            updateProgress();
        });


        function updateProgress() {
            var barelem = document.getElementById("my-progress-bar");
            var counterelem = document.getElementById("progress-counter");
            var counter = 0;
            var id = setInterval(frame, 1000);
            function frame() {
                counter = counterelem.innerText;
                if (counter == 110) {
                    clearInterval(id);
                }
                else {
                    barelem.style.width = counter + '%';
                }
            }
        }
    </script>*@
